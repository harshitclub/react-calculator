{"version":3,"sources":["App.js","Components/Header/Header.js","Components/Keypad/Keypad.js","assets/moon.png","assets/sun.png","index.js"],"names":["usedKeycodes","numbers","operators","App","useState","isDarkMode","setIsDarkMode","expression","setExpression","result","setResult","handleKeyPress","keycode","key","includes","length","calculateResult","lastChar","slice","exp","answer","eval","toFixed","className","tabIndex","onKeyDown","event","onClick","src","moonIcon","sunIcon","alt","Header","props","resultRef","useRef","useEffect","current","scrollIntoView","ref","Keypad","keyCode","label","map","item","index","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0f643f1.chunk.js","sourcesContent":["import React, { useState } from 'react'; // import react and useState\n\nimport Header from './Components/Header/Header' // import header component\nimport Keypad from './Components/Keypad/Keypad'; // import keypad component\n\nimport moonIcon from './assets/moon.png'; // import images from assest\nimport sunIcon from './assets/sun.png';\n\nimport './App.css'; // import main css file\n\nconst usedKeycodes = [ // allowed keycodes\n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103,\n  104, 105, 8, 13, 190, 187, 189, 191, 56, 111, 106, 107, 109,\n];\n\nconst numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]; // allowed numbers\n\nconst operators = [\"-\", \"+\", \"*\", \"/\"]; // allowed operators\n\nfunction App() { \n  const [isDarkMode, setIsDarkMode] = useState(false); // we use useState for setting the dark and light mode\n  const [expression, setExpression] = useState('');\n  const [result, setResult] = useState('');\n  // const [history, setHistory] = useState([]);\n\n  const handleKeyPress =(keycode,key)=>{\n\n    if(!keycode) return // keycode not come then return\n    if(!usedKeycodes.includes(keycode)) return // return if used keycode not include\n\n    if(numbers.includes(key)){\n      if(key===0){\n        if(expression.length===0) return // return if user input the 0\n      }\n      calculateResult(expression + key);\n      setExpression(expression+key); // add the input\n    } \n    else if(operators.includes(key)){\n      if(!expression)return\n      const lastChar = expression.slice(-1) // slice it gives last character\n      if(operators.includes(lastChar))  // return if last character is operator\n      if(lastChar==='.') return // last char \".\" then return\n      setExpression(expression + key); // add the input\n    } \n    else if(key === \".\"){\n      if(!expression) return\n      const lastChar=expression.slice(-1)\n      if(!numbers.includes(lastChar)) return\n      setExpression(expression + key);\n    }\n    else if(keycode === 13){\n      if(!expression) return\n      calculateResult(expression)\n\n      // const tempHistory = [...history];\n      // if(tempHistory.length>20) tempHistory = tempHistory.splice(0,1);\n      // tempHistory.push(expression);\n      // setHistory(tempHistory);\n    } \n    else if(keycode===8){\n      if(!expression) return // return if expression null\n      // calculateResult(expression.slice(0, -1));\n      setExpression(expression.slice(0, -1)) // it adds the first char and delete the last\n    }\n\n  };\n\n  const calculateResult=(exp)=>{\n      if(!exp) {\n        setResult(\"\");\n      return;\n      }\n      const lastChar = exp.slice(-1);\n      if(!numbers.includes(lastChar))exp.slice(0,-1)\n      const answer=eval(exp).toFixed(2) + '';\n      setResult(answer)\n  }\n\n  return (\n    <div className=\"app\" \n\n    tabIndex=\"0\" // tabindex 0 is important for taking keyboard input \n\n    onKeyDown={(event)=>handleKeyPress(event.keycode, event.key)}// we take the keyboard key values using handlekeypress function\n\n    data-theme={isDarkMode ? 'dark' : ''}>\n\n      <div className=\"app_calculator\">\n        <div className=\"app_calculator_navbar\">\n          <div className=\"app_calculator_navbar_toggle\" onClick={()=>setIsDarkMode(!isDarkMode)}> \n\n            <div className={`app_calculator_navbar_toggle_circle ${isDarkMode ? \"app_calculator_navbar_toggle_circle_active\" :''}`}></div>\n          </div>\n\n            <img src={isDarkMode ? moonIcon : sunIcon} alt=\"mode\" />\n\n        </div>\n\n        <Header expression={expression} result={result}/>\n\n        <Keypad handleKeyPress={handleKeyPress}/>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useRef, useEffect } from 'react'\r\n\r\nimport './Header.css'\r\n\r\nfunction Header(props) { //we make header function in which we control the history, expression, and result\r\n\tconst resultRef= useRef() // create resultRef and use the useRef function\r\n\tuseEffect(() => {\r\n\t\tresultRef.current.scrollIntoView() // it is to scroll to the result on the header\r\n\t\t}\r\n\t, [])\r\n\treturn ( \r\n\t\t<div className='header custom-scroll'>\r\n\t\t\t<div className=\"header_history\">\r\n\t\t\t\t<p></p>\r\n\t\t\t</div>\r\n\t\t\t<br /> \r\n\t\t\t<div className=\"header_expression custom-scroll\">\r\n\t\t\t\t<p>{props.expression}</p>\r\n\t\t\t</div>\r\n\t\t\t<p ref={resultRef} className=\"header_result\">{props.result}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nimport './Keypad.css'\r\n\r\nfunction Keypad(props) { // we make function using keypad keyword\r\n\t            \r\n\tconst keys = [ // we make the keys using array and store it in the keys variable\r\n\t  {\r\n\t\tkeyCode: 55,\r\n\t\tlabel: \"7\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 56,\r\n\t\tlabel: \"8\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 57,\r\n\t\tlabel: \"9\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 52,\r\n\t\tlabel: \"4\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 53,\r\n\t\tlabel: \"5\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 54,\r\n\t\tlabel: \"6\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 49,\r\n\t\tlabel: \"1\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 50,\r\n\t\tlabel: \"2\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 51,\r\n\t\tlabel: \"3\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 48,\r\n\t\tlabel: \"0\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 190,\r\n\t\tlabel: \".\",\r\n\t  },\r\n\t  {\r\n\t\tkeyCode: 13,\r\n\t\tlabel: \"=\",\r\n\t  },\r\n\t];\r\n\r\n\tconst symbols = [ // we make symbols, set labels and keycode for it and give it a value and they all are in the array form\r\n\t\t{\r\n\t\t  label: \"⌫\",\r\n\t\t  keyCode: 8,\r\n\t\t  value: \"backspace\",\r\n\t\t},\r\n\t\t{\r\n\t\t  label: \"÷\",\r\n\t\t  keyCode: 111,\r\n\t\t  value: \"/\",\r\n\t\t},\r\n\t\t{\r\n\t\t  label: \"×\",\r\n\t\t  keyCode: 56,\r\n\t\t  value: \"*\",\r\n\t\t},\r\n\t\t{\r\n\t\t  label: \"﹣\",\r\n\t\t  keyCode: 109,\r\n\t\t  value: \"-\",\r\n\t\t},\r\n\t\t{\r\n\t\t  label: \"+\",\r\n\t\t  keyCode: 107,\r\n\t\t  value: \"+\",\r\n\t\t},\r\n\t  ];\r\n\r\n\t  return( // we make div using keypad class and it includes the other div keypad_keys and keypad_symbols\r\n\t\t  <div className=\"keypad\">\r\n\t\t\t  <div className=\"keypad_keys\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeys.map((item,index)=><p \r\n\t\t\t\t\t\tonClick={()=>props.handleKeyPress(item.keyCode, item.label)} \r\n\t\t\t\t\t\tkey={index}>{item.label}</p>) // we show the keys to the users using the map function\r\n\t\t\t\t\t}\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"keypad_symbols\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsymbols.map((item,index)=><p \r\n\t\t\t\t\t\tonClick={()=>props.handleKeyPress(item.keyCode, item.value)} \r\n\t\t\t\t\t\tkey={index}>{item.label}</p>) // we show symbols to the users using the map function\r\n\t\t\t\t\t}\r\n\t\t\t  </div>\r\n\t\t  </div>\r\n\t  )\r\n}\r\n\r\nexport default Keypad;\r\n","export default __webpack_public_path__ + \"static/media/moon.ed34e3cc.png\";","export default __webpack_public_path__ + \"static/media/sun.c083fc15.png\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}